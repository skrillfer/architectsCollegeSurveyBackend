{"version":3,"sources":["logo.jpeg","components/form/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","normFile","e","console","log","Array","isArray","fileList","layout","tailLayout","wrapperCol","offset","span","FormGeneric","useState","loading","formState","setFormState","formRef","React","createRef","getFile","number","fetch","then","resp","blob","fileDownload","catch","err","openNotificationWithIcon","type","title","description","reload","notification","message","window","location","onFinish","values","a","formData","FormData","forEach","key","newF","File","originFileObj","dpi","append","request","XMLHttpRequest","open","setRequestHeader","send","onload","oEvent","status","rp","JSON","parse","response","paths","dpiFile","passportFile","collegiateFile","affidavitFile","applicationLetterFile","attachedFormFile","othersValues","method","body","stringify","code","headers","json","tip","spinning","icon","DownloadOutlined","size","onClick","ref","name","onFinishFailed","errorInfo","defaultActiveKey","Panel","header","Item","label","rules","required","dashed","style","display","valuePropName","getValueFromEvent","extra","listType","accept","UploadOutlined","htmlType","Header","Layout","Content","Footer","App","position","zIndex","width","className","src","logo","alt","theme","mode","defaultSelectedKeys","marginTop","padding","textAlign","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.0cb8a164.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b3f5545f.jpeg\";","import React,{useState} from 'react';\nimport { Form, Upload, Input, Button, Divider,DatePicker, Col, Row, notification, Space } from 'antd';\nimport { UploadOutlined, DownloadOutlined } from '@ant-design/icons';\nimport fileDownload from 'react-file-download';\n\nimport { Collapse } from 'antd';\nimport { Spin } from 'antd';\n\n\nconst normFile = (e) => {\n    // console.log(key);\n    // e.file.name = key;\n    console.log('Upload event:', e);\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  };\n\nconst layout = {\n    layout: 'vertical'\n  };\n  const tailLayout = {\n    wrapperCol: { offset: 10, span: 18 },\n  };\n\n\n  \nconst FormGeneric = () => {\n    const [formState, setFormState] = useState({loading:false});\n    const formRef = React.createRef();\n    const getFile = (number) =>{\n\n        fetch(number===1?\"http://e-fact.com.gt:5050/getFile\":\"http://e-fact.com.gt:5050/getFileAnexo\")\n        .then(resp => resp.blob())\n        .then(resp => {\n            fileDownload(resp, number===1?\"CartaSolicitud.pdf\":\"DocAnexo.docx\"); //This will download the file in browser.\n        })\n        .catch(err => console.log(err));\n    }\n    const openNotificationWithIcon = (type,title,description,reload) => {\n        notification[type]({\n          message: title,\n          description: description,\n        });\n        if(reload){\n            window.location.reload();\n        }\n        \n      };\n    const onFinish = async values => {\n        \n        if(values){\n            console.log('Success:', values);\n        }\n        setFormState({loading: true});\n        \n        const formData = new FormData();\n        ['dpiFile','passportFile','collegiateFile',\n        'affidavitFile','applicationLetterFile','attachedFormFile']\n        .forEach(key => {\n            const newF = new File([values[key][0].originFileObj], `${values.dpi}_${key}.pdf`, {type: 'application/pdf'});\n            formData.append(\"file\", newF);\n        });\n        const request = new XMLHttpRequest();\n    \n        request.open(\"POST\", \"http://e-fact.com.gt:5050/saveFile\");\n        request.setRequestHeader(\"enctype\", 'multipart/form-data');\n        request.setRequestHeader('Authorization', values.dpi);\n        request.send(formData);\n        request.onload = function(oEvent) {\n            if (request.status === 200) {\n                console.log(\"Uploaded!\");\n                const rp = JSON.parse(request.response);\n                console.log(rp);\n                \n                const paths = {};\n                ['dpiFile','passportFile','collegiateFile',\n                'affidavitFile','applicationLetterFile','attachedFormFile']\n                .forEach(key => {\n                    paths[key] = `${values.dpi}_${key}.pdf` || \"/\";\n                });\n                const {dpiFile,passportFile,collegiateFile,\n                    affidavitFile,applicationLetterFile,attachedFormFile, ...othersValues} = values;\n                console.log({ ...paths, ...othersValues});\n                fetch('http://e-fact.com.gt:5050/Survey',{\n                    method:'post',\n                    body: JSON.stringify({code:0, ...paths, ...othersValues}),\n                    headers: {'Content-Type': 'application/json'}\n                })\n                .then(resp => resp.json())\n                .then(resp => {\n                    console.log(resp);\n                    setFormState({loading: false});\n                    openNotificationWithIcon('success',\"Exito\",\"Informacion enviada correctamente, si desea puede enviar un nuevo formulario.\",true);\n                    \n                    \n                })\n                .catch(err => {\n                    setFormState({loading: false});\n                    openNotificationWithIcon('error',\"Error\",\"Ha ocurrido un error al tratar de enviar tu informacion, por favor intenta de nuevo.\",false);\n\n                    console.log(err)\n                });\n            } else {        \n                setFormState({loading: false});\n                openNotificationWithIcon('error',\"Error\",\"Ha ocurrido un error al tratar de subir tus documentos, por favor intenta de nuevo.\",false);\n\n                console.log(request);\n                console.log(\"Error \" + request.status + \" occurred when trying to upload your file.<br>\");\n            }\n        };\n\n            \n        \n      };\n    \n      const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n        openNotificationWithIcon('error',\"Informacion incompleta\",\"Por favor revisa la informacion ingresada, corrobara que has subido todos los documentos.\",false);\n      };\n    return (\n    <>\n        <Spin tip=\"Loading...\" spinning={formState.loading}>\n            <h5>Descargue los siguientes documentos, complete la informacion.</h5>\n            <Row>\n                <Col span={6}>\n                <Space>\n\n                    <Button type=\"primary\" icon={<DownloadOutlined />} size={'middle'} \n                    onClick={()=> getFile(1)} >\n                    Carta de Solicitud\n                    </Button>\n\n                    <Button type=\"primary\" icon={<DownloadOutlined />}\n                    onClick={()=> getFile(2)}\n                    size={'middle'}>\n                    Doc Anexo\n                    </Button>\n                </Space>\n                \n                </Col>\n                <Col span={6}>\n                    \n                </Col>\n            </Row>\n            <br/><br/>\n            <Form\n            ref={formRef}\n            {...layout}\n            name=\"basic\"\n            // initialValues={{ remember: true }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            >\n                <Collapse defaultActiveKey={['1']} >\n                    <Collapse.Panel header=\"Informacion Personal\" key={1}>\n                        <Form.Item\n                        label=\"Primer nombre\"\n                        name=\"firstName\"\n                        rules={[{ required: true, message: 'Por favor ingrese su primer nombre!' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Segundo nombre\"\n                            name=\"secondName\"\n                            rules={[{ required: false, message: '' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Otros nombres\"\n                            name=\"othersName\"\n                            rules={[{ required: false, message: '' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Divider dashed />\n\n                        <Form.Item\n                            label=\"Primer Apellido\"\n                            name=\"lastName\"\n                            rules={[{ required: true, message: 'Por favor ingrese su primer apellido!' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Segundo Apellido\"\n                            name=\"secondLastName\"\n                            rules={[{ required: false, message: '' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"Apellido de Casado(a)\"\n                            name=\"marriedSurName\"\n                            rules={[{ required: false, message: '' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Divider dashed />\n                        <Form.Item\n                            label=\"DPI\"\n                            name=\"dpi\"\n                            rules={[{ required: true, message: 'Por favor ingrese su dpi' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item\n                            label=\"NIT\"\n                            name=\"nit\"\n                            rules={[{ required: false, message: '' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Colegiado\"\n                            name=\"collegiate\"\n                            rules={[{ required: true, message: 'Por favor ingrese su numero de colegiado' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        <Form.Item\n                            name=\"date\"\n                            label=\"Fecha de nacimiento\"\n                            rules={[{ required: true, message: 'Por favor ingrese su fecha de nacimiento' }]}\n                            style={{\n                            display: 'inline-block',\n                            }}\n                        >\n                            <DatePicker />\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Celular\"\n                            name=\"telephone\"\n                            rules={[{ required: true, message: 'Por favor ingrese su telefono' }]}\n                        >\n                            <Input />\n                        </Form.Item>\n\n                        \n\n                        <Form.Item\n                            name=\"email\"\n                            label=\"E-mail\"\n                            rules={[\n                            {\n                                type: 'email',\n                                message: 'El valor no es un E-mail valido!',\n                            },\n                            {\n                                required: true,\n                                message: 'Por favor ingrese su E-mail!',\n                            },\n                            ]}\n                        >\n                            <Input />\n                        </Form.Item>\n                        \n                    </Collapse.Panel>\n                    <Collapse.Panel header=\"Documentos\" key={2} >\n\n                        <Form.Item\n                            name=\"dpiFile\"\n                            label=\"Documento DPI ambos lados\"\n                            valuePropName=\"fileList\"\n                            getValueFromEvent={normFile}\n                            extra=\"Subir pdf con foto de ambos lados del dpi\"\n                            rules={[{ required: true, message: 'Por favor ingrese su dpi' }]}\n                        >\n                            <Upload name=\"logo\"  listType=\"picture\" accept=\".docx, .pdf\"\n                            >\n                            <Button>\n                                <UploadOutlined /> Click para subir\n                            </Button>\n                            </Upload>\n                        </Form.Item>\n                        <Divider/>\n                        <Form.Item\n\n                            name=\"passportFile\"\n                            label=\"Pasaporte en documento pdf\"\n                            valuePropName=\"fileList\"\n                            getValueFromEvent={normFile}\n                            extra=\"Subir documento pdf pasaporte\"\n                            rules={[{ required: true, message: 'Por favor subir imagen de pasaporte en un archivo pdf' }]}\n                        >\n                            <Upload  name=\"logo\"  listType=\"picture\" accept=\".docx, .pdf\">\n                            <Button>\n                                <UploadOutlined /> Click para subir\n                            </Button>\n                            </Upload>\n                        </Form.Item>\n\n                        <Divider/>\n                        <Form.Item\n                            name=\"collegiateFile\"\n                            label=\"Colegiado en documento pdf\"\n                            valuePropName=\"fileList\"\n                            getValueFromEvent={normFile}\n                            extra=\"Subir pdf de la constancia de colegido\"\n                            rules={[{ required: true, message: 'Por favor suba su constancia de colegido' }]}\n                        >\n                            <Upload name=\"logo\"  listType=\"picture\" accept=\".docx, .pdf\">\n                            <Button>\n                                <UploadOutlined /> Click para subir\n                            </Button>\n                            </Upload>\n                        </Form.Item>\n                        <Divider/>\n                        <Form.Item\n                            name=\"affidavitFile\"\n                            label=\"Documento Acta Notarial\"\n                            valuePropName=\"fileList\"\n                            getValueFromEvent={normFile}\n                            extra=\"Subir document pdf del acta notarial\"\n                            rules={[{ required: true, message: 'Por favor suba documento de acta notarial' }]}\n                        >\n                            <Upload name=\"logo\"  listType=\"picture\" accept=\".docx, .pdf\">\n                            <Button>\n                                <UploadOutlined /> Click para subir\n                            </Button>\n                            </Upload>\n                        </Form.Item>\n                        <Divider/>\n                        <Form.Item\n                            name=\"applicationLetterFile\"\n                            label=\"Documento Carta de Solicitud\"\n                            valuePropName=\"fileList\"\n                            getValueFromEvent={normFile}\n                            extra=\"Descargue la Carta de Solicitud, luego subala.\"\n                            rules={[{ required: true, message: 'Por favor suba su Carta de Solicitud' }]}\n                        >\n                            <Upload name=\"logo\"  listType=\"picture\" accept=\".docx, .pdf\">\n                            <Button>\n                                <UploadOutlined /> Click para subir\n                            </Button>\n                            </Upload>\n                        </Form.Item>\n                        <Divider/>\n                        <Form.Item\n                            name=\"attachedFormFile\"\n                            label=\"Documento Anexo\"\n                            valuePropName=\"fileList\"\n                            getValueFromEvent={normFile}\n                            extra=\"Descargue el documento anexo, llenelo y subalo\"\n                            rules={[{ required: true, message: 'Por favor suba su documento anexo' }]}\n                        >\n                            <Upload name=\"logo\" listType=\"picture\" accept=\".docx, .pdf\">\n                            <Button>\n                                <UploadOutlined /> Click para subir\n                            </Button>\n                            </Upload>\n                        </Form.Item>\n                        \n                        \n                        \n\n                        \n                    </Collapse.Panel>\n                    <br/>\n                \n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                    Enviar Informacion\n                    </Button>\n                </Form.Item>\n                <br/><br/>\n            </Collapse>\n\n            </Form>\n        </Spin>\n       \n    </>\n    );\n}\n\nexport default FormGeneric;","import React from 'react';\nimport './App.css';\nimport FormGeneric from './components/form/form.component';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport logo from './logo.jpeg';\n\nimport { Layout, Menu } from 'antd';\nconst { Header, Content, Footer } = Layout;\n\n/*\n<div className=\"logo\" />\n*/\nfunction App() {\n  return (\n    <Layout>\n    <Header style={{position: 'fixed', zIndex: 1, width: '100%' }}>\n      \n      <img  className=\"logo\" src={logo} alt=\"My logo\" />\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n        <Menu.Item key=\"1\">Registro de informacion</Menu.Item>\n        \n      </Menu>\n    </Header>\n    <Content className=\"site-layout\" style={{ marginTop: 64, width:\"-webkit-fill-available\" }}>\n      <div className=\"site-layout-background\" style={{ padding: 24, width: \"100%\" }}>\n        <FormGeneric/>\n      </div>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>InfoUtility ©2020</Footer>\n  </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}